name: Upload to SharePoint via OIDC

on:
  workflow_dispatch:

permissions:
  id-token: write
  contents: read

env:
  SITE_ID: ${{ secrets.SITE_ID }}
  FILE_NAME: "demo.txt"
  LOCAL_PATH: "./demo.txt"

jobs:
  upload:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Create test file
        run: echo "Hello SharePoint from GitHub Actions" > ${{ env.FILE_NAME }}

      - name: Debug - Show environment
        run: |
          echo "Current directory: $(pwd)"
          echo "Files in directory:"
          ls -la
          echo "GitHub workspace: $GITHUB_WORKSPACE"
          echo "Files in workspace:"
          ls -la $GITHUB_WORKSPACE
          echo "SITE_ID: ${{ env.SITE_ID }}"

      - name: Login to Azure with OIDC
        uses: azure/login@v1
        with:
          client-id: "d4f66394-2034-4bb8-aa40-7cb8d4f1c58a" #github-sharepoint-integration
          tenant-id: "7264fb2a-5580-4c1e-a169-3df80f011601" #nbeaudoin456
          subscription-id: "c104e174-8f82-4e43-889c-d3b22b5da7b8" #SUB-1

      - name: Get Microsoft Graph access token
        id: get-token
        run: |
          TOKEN=$(az account get-access-token --resource=https://graph.microsoft.com --query accessToken -o tsv)
          echo "accessToken=$TOKEN" >> $GITHUB_OUTPUT
          echo "Token length: ${#TOKEN}"
          echo "Token first 10 chars: ${TOKEN:0:10}..."

      - name: Debug Access Token (App ID utilisÃ©e)
        run: |
          echo "Decoding JWT token..."
          TOKEN="${{ steps.get-token.outputs.accessToken }}"
          echo "Token claims:"
          echo "$TOKEN" | cut -d '.' -f2 | base64 -d | jq '.roles, .scp, .appid, .aud, .iss'
          echo "Token roles:"
          echo "$TOKEN" | cut -d '.' -f2 | base64 -d | jq -r '.roles[]' 2>/dev/null || echo "No roles found"
          echo "Token scopes:"
          echo "$TOKEN" | cut -d '.' -f2 | base64 -d | jq -r '.scp' 2>/dev/null || echo "No scopes found"
          echo "Token audience:"
          echo "$TOKEN" | cut -d '.' -f2 | base64 -d | jq -r '.aud' 2>/dev/null || echo "No audience found"

      - name: Verify SharePoint Access
        run: |
          echo "Verifying SharePoint access..."
          RESPONSE=$(curl -v -X GET \
            -H "Authorization: Bearer ${{ steps.get-token.outputs.accessToken }}" \
            -H "Content-Type: application/json" \
            "https://graph.microsoft.com/v1.0/sites/${{ env.SITE_ID }}" 2>&1)
          echo "Response: $RESPONSE"
          if echo "$RESPONSE" | grep -q '"error"'; then
            echo "Error accessing SharePoint site:"
            echo "$RESPONSE" | grep -o '"message":"[^"]*"' | cut -d'"' -f4
            exit 1
          fi

      - name: Debug - Show curl command
        run: |
          echo "Curl command that will be executed:"
          echo "curl -v -X PUT \
            -H \"Authorization: Bearer ***\" \
            -H \"Content-Type: text/plain\" \
            --upload-file \"${{ env.LOCAL_PATH }}\" \
            \"https://graph.microsoft.com/v1.0/sites/${{ env.SITE_ID }}/drive/root:/upload/${{ env.FILE_NAME }}:/content\""

      - name: Upload file to SharePoint-Allowed (Graph API) - allowed folder
        id: upload
        run: |
          echo "Uploading file to SharePoint..."
          RESPONSE=$(curl -s -X PUT \
            -H "Authorization: Bearer ${{ steps.get-token.outputs.accessToken }}" \
            -H "Content-Type: text/plain" \
            --upload-file "${{ env.LOCAL_PATH }}" \
            "https://graph.microsoft.com/v1.0/sites/${{ env.SITE_ID }}/drive/root:/upload/${{ env.FILE_NAME }}:/content")
          
          echo "Response: $RESPONSE"
          echo "response<<EOF" >> $GITHUB_OUTPUT
          echo "$RESPONSE" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          # Check if the response contains an error
          if echo "$RESPONSE" | grep -q '"error"'; then
            echo "Error detected in response"
            echo "$RESPONSE" | grep -o '"message":"[^"]*"' | cut -d'"' -f4
            exit 1
          fi

      - name: Upload file to SharePoint-Denied (Graph API) - denied folder
        id: upload_denied
        run: |
          echo "Uploading file to SharePoint root..."
          RESPONSE=$(curl -v -X PUT \
            -H "Authorization: Bearer ${{ steps.get-token.outputs.accessToken }}" \
            -H "Content-Type: text/plain" \
            --upload-file "${{ env.LOCAL_PATH }}" \
            "https://graph.microsoft.com/v1.0/sites/${{ env.SITE_ID }}/drive/root:/${{ env.FILE_NAME }}:/content" 2>&1)
          echo "Response: $RESPONSE"
          echo "response=$RESPONSE" >> $GITHUB_OUTPUT
            
          # Check if the response contains an error
          if echo "$RESPONSE" | grep -q '"error"'; then
            echo "Error detected in response"
            echo "$RESPONSE" | grep -o '"message":"[^"]*"' | cut -d'"' -f4
            exit 1
          fi

      - name: Debug - Show response
        if: always()
        run: |
          echo "Last command exit code: $?"
          echo "Upload response:"
          echo "${{ steps.upload.outputs.response }}"

      - name: Verify file upload
        run: |
          echo "Verifying file in SharePoint..."
          curl -v -X GET \
            -H "Authorization: Bearer ${{ steps.get-token.outputs.accessToken }}" \
            -H "Content-Type: application/json" \
            "https://graph.microsoft.com/v1.0/sites/${{ env.SITE_ID }}/drive/root:/upload/${{ env.FILE_NAME }}"

      - name: List files in Shared Documents
        run: |
          echo "Listing files..."
          curl -v -X GET \
            -H "Authorization: Bearer ${{ steps.get-token.outputs.accessToken }}" \
            -H "Content-Type: application/json" \
            "https://graph.microsoft.com/v1.0/sites/${{ env.SITE_ID }}/drive/root:/upload:/children"
          