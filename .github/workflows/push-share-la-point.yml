name: Push Share la Pointe 

# Controls when the workflow will run
on:
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
    inputs:
      action:
        description: "Action to perform (start/stop)"
        required: true
        type: choice
        options:
          - start
          - stop
# Il n'y a plus de cluster ds ton compte AWS donc on suspend les job cron
  schedule:
    # Run at 04:00 UTC every day
    - cron: "0 4 * * *"

permissions:
  id-token: write
  contents: read

jobs:
  push-sharepoint:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install Office365-REST-Python-Client requests

#      - name: Display variables
#        run: |
#          echo "Target cluster name: ${{ vars.EKS_CLUSTER_NAME }}"
#          echo "Target cluster node #: ${{ vars.EKS_DESIRED_SIZE }}"

      #- name: Configure AWS Credentials
      #  uses: aws-actions/configure-aws-credentials@v4
      #  with:
      #    role-to-assume: ${{ vars.AWS_ROLE_ARN }}
      #    aws-region: ${{ vars.AWS_REGION }}

#      - name: Manage EKS Cluster
#        run: |
#          aws sts get-caller-identity
#          echo "Test de fichier temoins" > fichier.txt
#          date >> fichier.txt
#          echo "Fin de fichier temoins" >> fichier.txt
#          # ACTION="${{ github.event_name == 'schedule' && 'stop' || github.event.inputs.action }}"
#          # TEAM_NOTIFY="${{ github.event_name == 'schedule' && 'true' || github.event.inputs.team_notification }}"
#          # DESIRED_SIZE="${{ github.event_name == 'schedule' && vars.EKS_DESIRED_SIZE || github.event.inputs.desired_size }}"
#          # python eks_scaler/python/main.py ${{ vars.EKS_CLUSTER_NAME }} $ACTION --team-notify $TEAM_NOTIFY --desired-size $DESIRED_SIZE

      - name: Get OIDC Token
        id: get-oidc-token
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          enable-AzPSSession: true

      - name: Create upload script
        run: |
          cat > upload.py << 'EOL'
          import os
          from office365.runtime.auth.client_credential import ClientCredential
          from office365.sharepoint.client_context import ClientContext
          
          # Récupération des variables d'environnement
          site_url = os.environ["SHAREPOINT_SITE_URL"]
          client_id = os.environ["AZURE_CLIENT_ID"]
          
          try:
              # Création du contexte SharePoint avec le token OIDC
              ctx = ClientContext(site_url).with_credentials(ClientCredential(client_id, None))
              
              # Chemin du dossier de destination
              target_folder = "Shared Documents"
              
              # Lecture du fichier local
              with open("test.txt", "rb") as content_file:
                  file_content = content_file.read()
              
              # Upload du fichier
              target_file = ctx.web.get_folder_by_server_relative_url(target_folder).upload_file("test.txt", file_content).execute_query()
              print(f"File has been uploaded to {target_file.serverRelativeUrl}")
          except Exception as e:
              print(f"Error occurred: {str(e)}")
              exit(1)
          EOL

      - name: Upload to SharePoint
        env:
          SHAREPOINT_SITE_URL: ${{ secrets.SHAREPOINT_SITE_URL }}
          AZURE_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
        run: python upload.py
